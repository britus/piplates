#------------------------------------------------------------------------------#
# This makefile was generated by 'cbp2make' tool rev.147                       #
#------------------------------------------------------------------------------#

# get current directory from make 
WORKDIR = $(CURDIR)

ifeq ($(OS_TARGET_TYPE),)
	OS_TARGET_TYPE := rpi
endif

ifeq ($(OS_TARGET_TYPE),macosx)
	CROSS_PATH      := /Volumes/rasberry-pi-dev-disk/gcc
	CROSS_COMPILE   := armv8-rpi3-linux-gnueabihf-
	CROSS_ROOTFS    := /Volumes/rasberry-pi-dev-disk/rootfs
endif

ifeq ($(OS_TARGET_TYPE),arm)
	CROSS_PATH      := /opt/cross/tool-chains/arm
	CROSS_COMPILE 	:= arm-linux-gnueabihf-
	CROSS_ROOTFS    := /opt/cross/arm/rpi3
endif

ifeq ($(OS_TARGET_TYPE),rpi)
	CROSS_PATH      := /usr
	CROSS_COMPILE 	:=
	CROSS_ROOTFS    := 
endif

CC 			:= $(CROSS_PATH)/bin/$(CROSS_COMPILE)gcc
CXX 		:= $(CROSS_PATH)/bin/$(CROSS_COMPILE)gcc
AR 			:= $(CROSS_PATH)/bin/$(CROSS_COMPILE)ar
LD 			:= $(CROSS_PATH)/bin/$(CROSS_COMPILE)gcc
WINDRES 	:= $(CROSS_PATH)/bin/$(CROSS_COMPILE)windres

TRACE_OPT 	:= -DPP_DEBUG -DTRACE_SPI_SETUP -DTRACE_SPI_OPS -DTRACE_SPI_COMMAND

# ===========================================================================
# Compiler defaults
# ===========================================================================

INCLUDES 	 = -Iinclude -Isrc/api -I./src
INCLUDES    += -I$(CROSS_ROOTFS)/usr/local/include
INCLUDES    += -I$(CROSS_ROOTFS)/usr/include/arm-linux-gnueabihf
INCLUDES    += -I$(CROSS_ROOTFS)/usr/include

CFLAGS		:= -fPIC -pthread -g -Wall -D_XOPEN_SOURCE -D_GNU_SOURCE -D_DEFAULT_SOURCE

RESINCLUDES := $(RESINC)
RCFLAGS 	:= $(RCFLAGS)

LIBDIRS     += -L$(CROSS_ROOTFS)/usr/local/lib
LIBDIRS     += -L$(CROSS_ROOTFS)/usr/lib/arm-linux-gnueabihf
LIBDIRS     += -L$(CROSS_ROOTFS)/usr/lib
LIBDIRS     += -L$(CROSS_ROOTFS)/lib/arm-linux-gnueabihf
LIBDIRS     += -L$(CROSS_ROOTFS)/lib
LIBDIRS 	+= -L$(WORKDIR)/lib

LDFLAGS 	:= $(LDFLAGS)

LIBRARIES 	:= -lwiringPi -lwiringPiDev -lpthread -lcrypt -lrt -lm

# ===========================================================================
# Debugging
# ===========================================================================

INC_DEBUG 				:= $(INCLUDES)
CFLAGS_DEBUG 			:= $(CFLAGS) -g $(TRACE_OPT)
RESINC_DEBUG 			:= $(RESINCLUDES)
RCFLAGS_DEBUG 			:= $(RCFLAGS)
LIBDIR_DEBUG 			:= $(LIBDIRS)
LIB_DEBUG 				:= $(LIBRARIES)
LDFLAGS_DEBUG 			:= $(LDFLAGS)
OBJDIR_DEBUG 			:= debug
DEP_DEBUG 				:= 
OUT_DEBUG 				:= $(OBJDIR_DEBUG)/libpiplates_d.so

INC_PPTEST_DEBUG 		:= $(INCLUDES)
CFLAGS_PPTEST_DEBUG 	:= $(CFLAGS) -g $(TRACE_OPT)
RESINC_PPTEST_DEBUG 	:= $(RESINC)
RCFLAGS_PPTEST_DEBUG 	:= $(RCFLAGS)
LIBDIR_PPTEST_DEBUG 	:= $(LIBDIRS) -L ./$(OBJDIR_DEBUG)
LIB_PPTEST_DEBUG 		:= $(LIBRARIES) -lpiplates_d
LDFLAGS_PPTEST_DEBUG 	:= $(LDFLAGS)
OBJDIR_PPTEST_DEBUG 	:= $(OBJDIR_DEBUG)
DEP_PPTEST_DEBUG 		:= 
OUT_PPTEST_DEBUG 		:= $(OBJDIR_PPTEST_DEBUG)/pptest

# ===========================================================================
# Relase
# ===========================================================================

INC_RELEASE 			:= $(INCLUDES)
CFLAGS_RELEASE 			:= $(CFLAGS) -O2
RESINC_RELEASE 			:= $(RESINCLUDES)
RCFLAGS_RELEASE 		:= $(RCFLAGS)
LIBDIR_RELEASE 			:= $(LIBDIRS) 
LIB_RELEASE 			:= $(LIBRARIES) -lwiringPi -lwiringPiDev
LDFLAGS_RELEASE 		:= $(LDFLAGS) 
OBJDIR_RELEASE 			:= release
DEP_RELEASE 			:= 
OUT_RELEASE 			:= $(OBJDIR_RELEASE)/libpiplates.so

INC_PPTEST_RELEASE 		:= $(INCLUDES)
CFLAGS_PPTEST_RELEASE 	:= $(CFLAGS) -O2
RESINC_PPTEST_RELEASE 	:= $(RESINCLUDES)
RCFLAGS_PPTEST_RELEASE 	:= $(RCFLAGS)
LIBDIR_PPTEST_RELEASE	:= $(LIBDIRS) -L ./$(OBJDIR_RELEASE)
LIB_PPTEST_RELEASE 		:= $(LIBRARIES) -lpiplates
LDFLAGS_PPTEST_RELEASE 	:= $(LDFLAGS) 
OBJDIR_PPTEST_RELEASE 	:= $(OBJDIR_RELEASE)
DEP_PPTEST_RELEASE 		:= 
OUT_PPTEST_RELEASE 		:= $(OBJDIR_PPTEST_RELEASE)/pptest

OBJ_DEBUG = $(OBJDIR_DEBUG)/src/api/ppapi.o $(OBJDIR_DEBUG)/src/api/spiops.o
OBJ_PPTEST_DEBUG = $(OBJDIR_PPTEST_DEBUG)/src/test/pptest.o

OBJ_RELEASE = $(OBJDIR_RELEASE)/src/api/ppapi.o $(OBJDIR_RELEASE)/src/api/spiops.o
OBJ_PPTEST_RELEASE = $(OBJDIR_PPTEST_RELEASE)/src/test/pptest.o

all: clean debug release pptest_debug pptest_release
	@cp -v $(OUT_RELEASE)  $(CROSS_ROOTFS)/usr/local/lib/
	@cp -v $(OUT_DEBUG)    $(CROSS_ROOTFS)/usr/local/lib/
	@mkdir -p              $(CROSS_ROOTFS)/usr/local/include/piplates
	@cp -v src/api/ppapi.h $(CROSS_ROOTFS)/usr/local/include/piplates/

clean: clean_debug clean_pptest_debug clean_release clean_pptest_release

before_debug: 
	@echo "** Build libpiplates debug"
	@test -d $(OBJDIR_DEBUG) || mkdir -p $(OBJDIR_DEBUG)
	@test -d $(OBJDIR_DEBUG)/src/api || mkdir -p $(OBJDIR_DEBUG)/src/api

after_debug: 

debug: before_debug out_debug after_debug

out_debug: before_debug $(OBJ_DEBUG) $(DEP_DEBUG)
	@$(LD) -shared $(LIBDIR_DEBUG) $(OBJ_DEBUG)  -o $(OUT_DEBUG) $(LDFLAGS_DEBUG) $(LIB_DEBUG)

$(OBJDIR_DEBUG)/src/api/ppapi.o: src/api/ppapi.c
	@$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c src/api/ppapi.c -o $(OBJDIR_DEBUG)/src/api/ppapi.o

$(OBJDIR_DEBUG)/src/api/spiops.o: src/api/spiops.c
	@$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c src/api/spiops.c -o $(OBJDIR_DEBUG)/src/api/spiops.o

clean_debug: 
	@rm -f $(OBJ_DEBUG) $(OUT_DEBUG)
	@rm -rf $(OBJDIR_DEBUG)/src/api

before_pptest_debug: 
	@echo "** Build PPTEST debug"
	@test -d $(OBJDIR_PPTEST_DEBUG) || mkdir -p $(OBJDIR_PPTEST_DEBUG)
	@test -d $(OBJDIR_PPTEST_DEBUG)/src/test || mkdir -p $(OBJDIR_PPTEST_DEBUG)/src/test

after_pptest_debug: 

pptest_debug: clean_pptest_debug before_pptest_debug out_pptest_debug after_pptest_debug

out_pptest_debug: before_pptest_debug $(OBJ_PPTEST_DEBUG) $(DEP_PPTEST_DEBUG)
	@$(LD) $(LIBDIR_PPTEST_DEBUG) -o $(OUT_PPTEST_DEBUG) $(OBJ_PPTEST_DEBUG)  $(LDFLAGS_PPTEST_DEBUG) $(LIB_PPTEST_DEBUG)

$(OBJDIR_PPTEST_DEBUG)/src/test/pptest.o: src/test/pptest.c
	@$(CC) $(CFLAGS_PPTEST_DEBUG) $(INC_PPTEST_DEBUG) -c src/test/pptest.c -o $(OBJDIR_PPTEST_DEBUG)/src/test/pptest.o

clean_pptest_debug: 
	@rm -f $(OBJ_PPTEST_DEBUG) $(OUT_PPTEST_DEBUG)
	@rm -rf $(OBJDIR_PPTEST_DEBUG)/src/test

before_release: clean_release 
	@echo "** Build libpiplates release"
	@test -d $(OBJDIR_RELEASE) || mkdir -p $(OBJDIR_RELEASE)
	@test -d $(OBJDIR_RELEASE)/src/api || mkdir -p $(OBJDIR_RELEASE)/src/api

after_release: 

release: clean_release before_release out_release after_release

out_release: before_release $(OBJ_RELEASE) $(DEP_RELEASE)
	@$(LD) -shared $(LIBDIR_RELEASE) $(OBJ_RELEASE)  -o $(OUT_RELEASE) $(LDFLAGS_RELEASE) $(LIB_RELEASE)

$(OBJDIR_RELEASE)/src/api/ppapi.o: src/api/ppapi.c
	@$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c src/api/ppapi.c -o $(OBJDIR_RELEASE)/src/api/ppapi.o

$(OBJDIR_RELEASE)/src/api/spiops.o: src/api/spiops.c
	@$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c src/api/spiops.c -o $(OBJDIR_RELEASE)/src/api/spiops.o

clean_release: 
	@rm -f $(OBJ_RELEASE) $(OUT_RELEASE)
	@rm -rf $(OBJ_RELEASE)
	@rm -rf $(OBJDIR_RELEASE)/src/api
	@rm -f $(CROSS_ROOTFS)/usr/local/lib/libpiplates*
	@rm -rf $(CROSS_ROOTFS)/usr/local/include/piplates

before_pptest_release: 
	@echo "** Build PPTEST release"
	@test -d $(OBJDIR_PPTEST_RELEASE) || mkdir -p $(OBJDIR_PPTEST_RELEASE)
	@test -d $(OBJDIR_PPTEST_RELEASE)/src/test || mkdir -p $(OBJDIR_PPTEST_RELEASE)/src/test

after_pptest_release: 

pptest_release: clean_pptest_release before_pptest_release out_pptest_release after_pptest_release

out_pptest_release: before_pptest_release $(OBJ_PPTEST_RELEASE) $(DEP_PPTEST_RELEASE)
	@$(LD) $(LIBDIR_PPTEST_RELEASE) -o $(OUT_PPTEST_RELEASE) $(OBJ_PPTEST_RELEASE)  $(LDFLAGS_PPTEST_RELEASE) $(LIB_PPTEST_RELEASE)

$(OBJDIR_PPTEST_RELEASE)/src/test/pptest.o: src/test/pptest.c
	@$(CC) $(CFLAGS_PPTEST_RELEASE) $(INC_PPTEST_RELEASE) -c src/test/pptest.c -o $(OBJDIR_PPTEST_RELEASE)/src/test/pptest.o

clean_pptest_release: 
	@rm -f $(OBJ_PPTEST_RELEASE) $(OUT_PPTEST_RELEASE)
	@rm -rf $(OBJDIR_PPTEST_RELEASE)/src/test
	@rm -rf $(OBJDIR_RELEASE)
	
.PHONY: before_debug after_debug clean_debug before_pptest_debug after_pptest_debug clean_pptest_debug before_release after_release clean_release before_pptest_release after_pptest_release clean_pptest_release

